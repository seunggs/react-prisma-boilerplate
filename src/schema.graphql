# import * from './generated/prisma.graphql'

# Custom
scalar Upload

type Query {
  # Custom
  me: User!

  # Copied from generated schema
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  members(where: MemberWhereInput, orderBy: MemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Member]!
  user(where: UserWhereUniqueInput!): User
  file(where: FileWhereUniqueInput!): File
  project(where: ProjectWhereUniqueInput!): Project
  member(where: MemberWhereUniqueInput!): Member
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  membersConnection(where: MemberWhereInput, orderBy: MemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MemberConnection!
}

type Mutation {
  # Custom
  uploadFile(folder: String, file: Upload!, project: Project, hero: Boolean): File!
  uploadFiles(folder: String, files: [Upload!]!): [File!]!
  renameFile(id: ID!, name: String!): File

  # Copied from generated schema
  createUser(data: UserCreateInput!): User!
  createFile(data: FileCreateInput!): File!
  createProject(data: ProjectCreateInput!): Project!
  createMember(data: MemberCreateInput!): Member!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateMember(data: MemberUpdateInput!, where: MemberWhereUniqueInput!): Member
  deleteUser(where: UserWhereUniqueInput!): User
  deleteFile(where: FileWhereUniqueInput!): File
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteMember(where: MemberWhereUniqueInput!): Member
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  upsertMember(where: MemberWhereUniqueInput!, create: MemberCreateInput!, update: MemberUpdateInput!): Member!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyFiles(data: FileUpdateManyMutationInput!, where: FileWhereInput): BatchPayload!
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  updateManyMembers(data: MemberUpdateManyMutationInput!, where: MemberWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  deleteManyMembers(where: MemberWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}