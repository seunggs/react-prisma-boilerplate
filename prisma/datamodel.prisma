type User {
  id: ID! @unique
  updatedAt: DateTime!
  createdAt: DateTime!
  email: String! @unique
  hasPassword: Boolean
  hasSocialLogin: Boolean
  name: String
  username: String @unique
  picture: String
  twitter: String
  role: UserRole! @default(value: USER)
  memberOf: [Member!] @relation(name: "MemberToUser", onDelete: CASCADE)
  createdProjects: [Project!] @relation(name: "ProjectAuthorToUser", onDelete: CASCADE)
  votedProjects: [Project!] @relation(name: "ProjectVoterToUser", onDelete: CASCADE)
}

enum UserRole {
  ROOT,
  ADMIN,
  USER,
}

type File {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  filename: String!
  mimetype: String!
  encoding: String!
  url: String! @unique
  hero: Boolean
  project: Project @relation(name: "ProjectToFile", onDelete: SET_NULL)
}

type Project {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  published: Boolean! @default(value: false)
  featured: Boolean @default(value: false)
  name: String!
  url: String! @unique
  title: String!
  description: String!
  body: Json
  author: User! @relation(name: "ProjectAuthorToUser", onDelete: SET_NULL)
  members: [Member!]! @relation(name: "MemberToProject", onDelete: CASCADE)
  voters: [User!] @relation(name: "ProjectVoterToUser", onDelete: SET_NULL)
  images: [File!] @relation(name: "ProjectToFile", onDelete: CASCADE)
}

type Member {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User! @relation(name: "MemberToUser", onDelete: SET_NULL)
  role: MemberRole! @default(value: USER)
  project: Project! @relation(name: "MemberToProject", onDelete: SET_NULL)
}

enum MemberRole {
  ROOT,
  ADMIN,
  MODERATOR,
  USER,
}