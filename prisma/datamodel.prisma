type User {
  id: ID! @unique
  updatedAt: DateTime!
  createdAt: DateTime!
  email: String! @unique
  hasPassword: Boolean
  hasSocialLogin: Boolean
  name: String
  username: String @unique
  picture: String
  twitter: String
  memberOf: [Member!]! @relation(name: "MemberToUser", onDelete: CASCADE)
  createdProjects: [Project!]! @relation(name: "ProjectAuthorToUser", onDelete: CASCADE)
  votedProjects: [Project!]! @relation(name: "ProjectVoteToUser", onDelete: CASCADE)
}

type File {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  filename: String!
  mimetype: String!
  encoding: String!
  url: String! @unique
}

type Project {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  published: Boolean!
  featured: Boolean
  members: [Member!]! @relation(name: "MemberToProject", onDelete: CASCADE)
  name: String!
  url: String! @unique
  title: String!
  description: String!
  body: Json
  author: User! @relation(name: "ProjectAuthorToUser", onDelete: SET_NULL)
  votes: [User!]! @relation(name: "ProjectVoteToUser", onDelete: SET_NULL)
  images: [Image!]! @relation(name: "ProjectToImage", onDelete: CASCADE)
}

type Member {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User! @relation(name: "MemberToUser", onDelete: SET_NULL)
  project: Project! @relation(name: "MemberToProject", onDelete: SET_NULL)
}

type Image {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!
  url: String! @unique
  hero: Boolean
  project: Project @relation(name: "ProjectToImage", onDelete: SET_NULL)
}